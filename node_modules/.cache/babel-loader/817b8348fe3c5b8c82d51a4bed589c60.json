{"ast":null,"code":"var _jsxFileName = \"/Users/coderdojo/QuizApp/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { fetchQuizQuestions } from \"./API\"; //Components\n\nimport QuestionCard from \"./components/QuestionCard\"; //Types\n\nimport { Difficulty } from \"./API\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = e => {\n    if (!gameOver) {\n      //User answer\n      const answer = e.currentTarget.value; //Check answer against correct value\n\n      const correct = questions[number].correct_answer === answer; //Add score if answer is right\n\n      if (correct) setScore(prev => prev + 1); //Save answer in the array for user answers\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    //Move on to next q\n    const nextQuestion = number + 1;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" React Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), gameOver || userAnswers.length === TOTAL_QUESTIONS ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start\",\n      onClick: startTrivia,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this) : null, !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"score\",\n      children: \" Score : \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 20\n    }, this) : null, loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Loading Questions ... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 19\n    }, this), !loading && !gameOver && /*#__PURE__*/_jsxDEV(QuestionCard, {\n      questionNr: number + 1,\n      totalQuestions: TOTAL_QUESTIONS,\n      question: questions[number].question,\n      answers: questions[number].answers,\n      userAnswer: userAnswers ? userAnswers[number] : undefined,\n      callback: checkAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next\",\n      onClick: nextQuestion,\n      children: \"Next Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"3vxO9CiM0ITniaGpI+eu+AjXM9U=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/coderdojo/QuizApp/src/App.tsx"],"names":["React","useState","fetchQuizQuestions","QuestionCard","Difficulty","TOTAL_QUESTIONS","App","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","newQuestions","EASY","checkAnswer","e","answer","currentTarget","value","correct","correct_answer","prev","answerObject","question","correctAnswer","nextQuestion","length","answers","undefined"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { fetchQuizQuestions } from \"./API\";\n\n//Components\nimport QuestionCard from \"./components/QuestionCard\";\n//Types\nimport { QuestionState, Difficulty } from \"./API\";\n\ntype AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      //User answer\n      const answer = e.currentTarget.value;\n      //Check answer against correct value\n      const correct = questions[number].correct_answer === answer;\n      //Add score if answer is right\n      if (correct) setScore((prev) => prev + 1);\n      //Save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    //Move on to next q\n    const nextQuestion = number + 1;\n  };\n\n  return (\n    <div className=\"App\">\n      <h1> React Quiz</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className=\"start\" onClick={startTrivia}>\n          Start\n        </button>\n      ) : null}\n\n      {!gameOver ? <p className=\"score\"> Score : </p> : null}\n      {loading && <p> Loading Questions ... </p>}\n      {!loading && !gameOver && (\n        <QuestionCard\n          questionNr={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n        />\n      )}\n\n      {!gameOver &&\n      !loading &&\n      userAnswers.length === number + 1 &&\n      number !== TOTAL_QUESTIONS - 1 ? (\n        <button className=\"next\" onClick={nextQuestion}>\n          Next Question\n        </button>\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}