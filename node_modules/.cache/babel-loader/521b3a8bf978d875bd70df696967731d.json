{"ast":null,"code":"import { shuffleArray } from \"./utils\";\nexport let Difficulty;\n\n(function (Difficulty) {\n  Difficulty[\"EASY\"] = \"easy\";\n  Difficulty[\"MEDIUM\"] = \"medium\";\n  Difficulty[\"HARD\"] = \"hard\";\n})(Difficulty || (Difficulty = {}));\n\nexport const fetchQuizQuestions = async (amount, difficulty) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map(question => ({ ...question,\n    answer: shuffleArray([...question.incorrect_answer, question.correct_answer])\n  }));\n};","map":{"version":3,"sources":["/Users/coderdojo/QuizApp/src/API.ts"],"names":["shuffleArray","Difficulty","fetchQuizQuestions","amount","difficulty","endpoint","data","fetch","json","results","map","question","answer","incorrect_answer","correct_answer"],"mappings":"AAAA,SAASA,YAAT,QAA6B,SAA7B;AAEA,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAiBZ,OAAO,MAAMC,kBAAkB,GAAG,OAChCC,MADgC,EAEhCC,UAFgC,KAG7B;AACH,QAAMC,QAAQ,GAAI,sCAAqCF,MAAO,eAAcC,UAAW,gBAAvF;AACA,QAAME,IAAI,GAAG,MAAM,CAAC,MAAMC,KAAK,CAACF,QAAD,CAAZ,EAAwBG,IAAxB,EAAnB;AACA,SAAOF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,QAAD,KAAyB,EAC/C,GAAGA,QAD4C;AAE/CC,IAAAA,MAAM,EAAEZ,YAAY,CAAC,CACnB,GAAGW,QAAQ,CAACE,gBADO,EAEnBF,QAAQ,CAACG,cAFU,CAAD;AAF2B,GAAzB,CAAjB,CAAP;AAOD,CAbM","sourcesContent":["import { shuffleArray } from \"./utils\";\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answer: string[];\n  question: string;\n  type: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport const fetchQuizQuestions = async (\n  amount: number,\n  difficulty: Difficulty\n) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question) => ({\n    ...question,\n    answer: shuffleArray([\n      ...question.incorrect_answer,\n      question.correct_answer,\n    ]),\n  }));\n};\n"]},"metadata":{},"sourceType":"module"}